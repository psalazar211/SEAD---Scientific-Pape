# -*- coding: utf-8 -*-
"""jmeint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aCZEl8B1WpyYmGuBC9YvHUAAazm0NIDl

Model
"""

import tensorflow as tf
import matplotlib.pyplot as plt

model = tf.keras.models.Sequential([
	tf.keras.layers.Input(dtype=float,shape=(64,)),
	tf.keras.layers.Dense(64, activation='sigmoid'),
	tf.keras.layers.Dropout(0.01),
	tf.keras.layers.Dense(64, activation='sigmoid'),
	tf.keras.layers.Dense(64)
])

model.compile(optimizer='RMSprop', loss=tf.keras.metrics.mean_squared_error, metrics=["mae"])

model.summary()

inTrain = []
outTrain = []
inTest = []
outTest = []

f = open("aggregated.fann", "r")
shape = f.readline()
num=int(shape.split()[0])
numTrain = int(num*0.9)
numTest = int(num*0.1)

for i in range(numTrain):
  inLine = f.readline()
  outLine = f.readline()
  if not inLine or not outLine:
    break
  inStr = inLine.split()
  inFloat = []
  inFloat.append(float(inStr[0]))
  inFloat.append(float(inStr[1]))
  inFloat.append(float(inStr[2]))
  inFloat.append(float(inStr[3]))
  inFloat.append(float(inStr[4]))
  inFloat.append(float(inStr[5]))
  inFloat.append(float(inStr[6]))
  inFloat.append(float(inStr[7]))
  inFloat.append(float(inStr[8]))
  inFloat.append(float(inStr[9]))
  inFloat.append(float(inStr[10]))
  inFloat.append(float(inStr[11]))
  inFloat.append(float(inStr[12]))
  inFloat.append(float(inStr[13]))
  inFloat.append(float(inStr[14]))
  inFloat.append(float(inStr[15]))
  inFloat.append(float(inStr[16]))
  inFloat.append(float(inStr[17]))
  inFloat.append(float(inStr[18]))
  inFloat.append(float(inStr[19]))
  inFloat.append(float(inStr[20]))
  inFloat.append(float(inStr[21]))
  inFloat.append(float(inStr[22]))
  inFloat.append(float(inStr[23]))
  inFloat.append(float(inStr[24]))
  inFloat.append(float(inStr[25]))
  inFloat.append(float(inStr[26]))
  inFloat.append(float(inStr[27]))
  inFloat.append(float(inStr[28]))
  inFloat.append(float(inStr[29]))
  inFloat.append(float(inStr[30]))
  inFloat.append(float(inStr[31]))
  inFloat.append(float(inStr[32]))
  inFloat.append(float(inStr[33]))
  inFloat.append(float(inStr[34]))
  inFloat.append(float(inStr[35]))
  inFloat.append(float(inStr[36]))
  inFloat.append(float(inStr[37]))
  inFloat.append(float(inStr[38]))
  inFloat.append(float(inStr[39]))
  inFloat.append(float(inStr[40]))
  inFloat.append(float(inStr[41]))
  inFloat.append(float(inStr[42]))
  inFloat.append(float(inStr[43]))
  inFloat.append(float(inStr[44]))
  inFloat.append(float(inStr[45]))
  inFloat.append(float(inStr[46]))
  inFloat.append(float(inStr[47]))
  inFloat.append(float(inStr[48]))
  inFloat.append(float(inStr[49]))
  inFloat.append(float(inStr[50]))
  inFloat.append(float(inStr[51]))
  inFloat.append(float(inStr[52]))
  inFloat.append(float(inStr[53]))
  inFloat.append(float(inStr[54]))
  inFloat.append(float(inStr[55]))
  inFloat.append(float(inStr[56]))
  inFloat.append(float(inStr[57]))
  inFloat.append(float(inStr[58]))
  inFloat.append(float(inStr[59]))
  inFloat.append(float(inStr[60]))
  inFloat.append(float(inStr[61]))
  inFloat.append(float(inStr[62]))
  inFloat.append(float(inStr[63]))
  inTrain.append(inFloat)
  outStr = outLine.split()
  outFloat = []
  outFloat.append(float(outStr[0]))
  outFloat.append(float(outStr[1]))
  outFloat.append(float(outStr[2]))
  outFloat.append(float(outStr[3]))
  outFloat.append(float(outStr[4]))
  outFloat.append(float(outStr[5]))
  outFloat.append(float(outStr[6]))
  outFloat.append(float(outStr[7]))
  outFloat.append(float(outStr[8]))
  outFloat.append(float(outStr[9]))
  outFloat.append(float(outStr[10]))
  outFloat.append(float(outStr[11]))
  outFloat.append(float(outStr[12]))
  outFloat.append(float(outStr[13]))
  outFloat.append(float(outStr[14]))
  outFloat.append(float(outStr[15]))
  outFloat.append(float(outStr[16]))
  outFloat.append(float(outStr[17]))
  outFloat.append(float(outStr[18]))
  outFloat.append(float(outStr[19]))
  outFloat.append(float(outStr[20]))
  outFloat.append(float(outStr[21]))
  outFloat.append(float(outStr[22]))
  outFloat.append(float(outStr[23]))
  outFloat.append(float(outStr[24]))
  outFloat.append(float(outStr[25]))
  outFloat.append(float(outStr[26]))
  outFloat.append(float(outStr[27]))
  outFloat.append(float(outStr[28]))
  outFloat.append(float(outStr[29]))
  outFloat.append(float(outStr[30]))
  outFloat.append(float(outStr[31]))
  outFloat.append(float(outStr[32]))
  outFloat.append(float(outStr[33]))
  outFloat.append(float(outStr[34]))
  outFloat.append(float(outStr[35]))
  outFloat.append(float(outStr[36]))
  outFloat.append(float(outStr[37]))
  outFloat.append(float(outStr[38]))
  outFloat.append(float(outStr[39]))
  outFloat.append(float(outStr[40]))
  outFloat.append(float(outStr[41]))
  outFloat.append(float(outStr[42]))
  outFloat.append(float(outStr[43]))
  outFloat.append(float(outStr[44]))
  outFloat.append(float(outStr[45]))
  outFloat.append(float(outStr[46]))
  outFloat.append(float(outStr[47]))
  outFloat.append(float(outStr[48]))
  outFloat.append(float(outStr[49]))
  outFloat.append(float(outStr[50]))
  outFloat.append(float(outStr[51]))
  outFloat.append(float(outStr[52]))
  outFloat.append(float(outStr[53]))
  outFloat.append(float(outStr[54]))
  outFloat.append(float(outStr[55]))
  outFloat.append(float(outStr[56]))
  outFloat.append(float(outStr[57]))
  outFloat.append(float(outStr[58]))
  outFloat.append(float(outStr[59]))
  outFloat.append(float(outStr[60]))
  outFloat.append(float(outStr[61]))
  outFloat.append(float(outStr[62]))
  outFloat.append(float(outStr[63]))
  outTrain.append(outFloat)

for i in range(numTest):
  inLine = f.readline()
  outLine = f.readline()
  if not inLine or not outLine:
    break
  inStr = inLine.split()
  inFloat = []
  inFloat.append(float(inStr[0]))
  inFloat.append(float(inStr[1]))
  inFloat.append(float(inStr[2]))
  inFloat.append(float(inStr[3]))
  inFloat.append(float(inStr[4]))
  inFloat.append(float(inStr[5]))
  inFloat.append(float(inStr[6]))
  inFloat.append(float(inStr[7]))
  inFloat.append(float(inStr[8]))
  inFloat.append(float(inStr[9]))
  inFloat.append(float(inStr[10]))
  inFloat.append(float(inStr[11]))
  inFloat.append(float(inStr[12]))
  inFloat.append(float(inStr[13]))
  inFloat.append(float(inStr[14]))
  inFloat.append(float(inStr[15]))
  inFloat.append(float(inStr[16]))
  inFloat.append(float(inStr[17]))
  inFloat.append(float(inStr[18]))
  inFloat.append(float(inStr[19]))
  inFloat.append(float(inStr[20]))
  inFloat.append(float(inStr[21]))
  inFloat.append(float(inStr[22]))
  inFloat.append(float(inStr[23]))
  inFloat.append(float(inStr[24]))
  inFloat.append(float(inStr[25]))
  inFloat.append(float(inStr[26]))
  inFloat.append(float(inStr[27]))
  inFloat.append(float(inStr[28]))
  inFloat.append(float(inStr[29]))
  inFloat.append(float(inStr[30]))
  inFloat.append(float(inStr[31]))
  inFloat.append(float(inStr[32]))
  inFloat.append(float(inStr[33]))
  inFloat.append(float(inStr[34]))
  inFloat.append(float(inStr[35]))
  inFloat.append(float(inStr[36]))
  inFloat.append(float(inStr[37]))
  inFloat.append(float(inStr[38]))
  inFloat.append(float(inStr[39]))
  inFloat.append(float(inStr[40]))
  inFloat.append(float(inStr[41]))
  inFloat.append(float(inStr[42]))
  inFloat.append(float(inStr[43]))
  inFloat.append(float(inStr[44]))
  inFloat.append(float(inStr[45]))
  inFloat.append(float(inStr[46]))
  inFloat.append(float(inStr[47]))
  inFloat.append(float(inStr[48]))
  inFloat.append(float(inStr[49]))
  inFloat.append(float(inStr[50]))
  inFloat.append(float(inStr[51]))
  inFloat.append(float(inStr[52]))
  inFloat.append(float(inStr[53]))
  inFloat.append(float(inStr[54]))
  inFloat.append(float(inStr[55]))
  inFloat.append(float(inStr[56]))
  inFloat.append(float(inStr[57]))
  inFloat.append(float(inStr[58]))
  inFloat.append(float(inStr[59]))
  inFloat.append(float(inStr[60]))
  inFloat.append(float(inStr[61]))
  inFloat.append(float(inStr[62]))
  inFloat.append(float(inStr[63]))
  inTest.append(inFloat)
  outStr = outLine.split()
  outFloat = []
  outFloat.append(float(outStr[0]))
  outFloat.append(float(outStr[1]))
  outFloat.append(float(outStr[2]))
  outFloat.append(float(outStr[3]))
  outFloat.append(float(outStr[4]))
  outFloat.append(float(outStr[5]))
  outFloat.append(float(outStr[6]))
  outFloat.append(float(outStr[7]))
  outFloat.append(float(outStr[8]))
  outFloat.append(float(outStr[9]))
  outFloat.append(float(outStr[10]))
  outFloat.append(float(outStr[11]))
  outFloat.append(float(outStr[12]))
  outFloat.append(float(outStr[13]))
  outFloat.append(float(outStr[14]))
  outFloat.append(float(outStr[15]))
  outFloat.append(float(outStr[16]))
  outFloat.append(float(outStr[17]))
  outFloat.append(float(outStr[18]))
  outFloat.append(float(outStr[19]))
  outFloat.append(float(outStr[20]))
  outFloat.append(float(outStr[21]))
  outFloat.append(float(outStr[22]))
  outFloat.append(float(outStr[23]))
  outFloat.append(float(outStr[24]))
  outFloat.append(float(outStr[25]))
  outFloat.append(float(outStr[26]))
  outFloat.append(float(outStr[27]))
  outFloat.append(float(outStr[28]))
  outFloat.append(float(outStr[29]))
  outFloat.append(float(outStr[30]))
  outFloat.append(float(outStr[31]))
  outFloat.append(float(outStr[32]))
  outFloat.append(float(outStr[33]))
  outFloat.append(float(outStr[34]))
  outFloat.append(float(outStr[35]))
  outFloat.append(float(outStr[36]))
  outFloat.append(float(outStr[37]))
  outFloat.append(float(outStr[38]))
  outFloat.append(float(outStr[39]))
  outFloat.append(float(outStr[40]))
  outFloat.append(float(outStr[41]))
  outFloat.append(float(outStr[42]))
  outFloat.append(float(outStr[43]))
  outFloat.append(float(outStr[44]))
  outFloat.append(float(outStr[45]))
  outFloat.append(float(outStr[46]))
  outFloat.append(float(outStr[47]))
  outFloat.append(float(outStr[48]))
  outFloat.append(float(outStr[49]))
  outFloat.append(float(outStr[50]))
  outFloat.append(float(outStr[51]))
  outFloat.append(float(outStr[52]))
  outFloat.append(float(outStr[53]))
  outFloat.append(float(outStr[54]))
  outFloat.append(float(outStr[55]))
  outFloat.append(float(outStr[56]))
  outFloat.append(float(outStr[57]))
  outFloat.append(float(outStr[58]))
  outFloat.append(float(outStr[59]))
  outFloat.append(float(outStr[60]))
  outFloat.append(float(outStr[61]))
  outFloat.append(float(outStr[62]))
  outFloat.append(float(outStr[63]))
  outTest.append(outFloat)
f.close()

"""Train model"""

model.fit(inTrain, outTrain, epochs=100)

"""Evaluate"""
model.evaluate(inTest, outTest, verbose=1)


#predictions = model.predict(inTest)
#plt.figure(figsize = (15,10))
#plt.scatter(outTest, predictions)
#plt.xlabel("Actual pixels")
#plt.ylabel("Predicted pixels")
#plt.plot([-0.5,0.5], [-0.5,0.5], 'r')
#plt.grid(True)
#plt.show()

for i in range(numTest):
	test=[]
	test.append(inTest[i])
	#print(model.predict(test),outTest[i])

model.save('model')

def representative_dataset():
  for data in tf.data.Dataset.from_tensor_slices((inTrain)).batch(1).take(100):
    yield [data]

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.representative_dataset = representative_dataset
converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]
#converter.inference_input_type = tf.int8
#converter.inference_output_type = tf.int8
tflite_model = converter.convert()

with open('model.tflite', 'wb') as f:
  f.write(tflite_model)



